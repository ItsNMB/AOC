#![allow(unused)]
#![allow(dead_code)]

use log::{debug, error, info, trace, warn};
use std::fs::File;
use std::io::prelude::*;
use std::path::Path;

fn find_substring(haystack: &str, needle: &str) -> Option<usize> {
    haystack.find(needle)
    // if let Some(index) = haystack.find(needle) {
    //     Some(index)
    // } else {
    //     None
    // }
}

fn find_all_literals(line: &str) -> Vec<(usize, &str)> {
    debug!("searching for literals line: {}", line);
    let literals = [
        "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine",
    ];
    let mut result: Vec<(usize, &str)> = Vec::new();
    for (_, l) in literals.iter().enumerate() {
        if let Some(index) = line.find(l) {
            debug!("Substring [{}] found at index: {}", l, index);
            result.push((index, l))
        }
    }
    result
}

fn find_all_digits(line: &str) -> Vec<(usize, usize)> {
    debug!("searching for digits in line: {}", line);
    let mut result: Vec<(usize, usize)> = Vec::new();
    let chars: Vec<char> = line.chars().collect();
    for (i, c) in chars.iter().enumerate() {
        if c.is_ascii_digit() {
            debug!("Digit [{}] found at index: {}", c, i);
            result.push((i, c.to_string().parse::<usize>().unwrap()));
        }
    }
    result
}

fn process(values: &mut str) {
    let literals = [
        "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine",
    ];

    let mut sum = 0;

    for line in values.lines() {
        let chars: Vec<char> = line.chars().collect();
        let mut first: usize = 0;
        let mut last: usize = 0;

        for (i, c) in chars.iter().enumerate() {
            if c.is_ascii_digit() {
                first = i;
                break;
            }
        }

        for (i, c) in chars.iter().enumerate().rev() {
            if c.is_ascii_digit() {
                last = i;
                break;
            }
        }

        let first_char = chars[first];
        let last_char = chars[last];
        let joined = format!("{}{}", first_char, last_char);

        debug!("line: {}", line);
        debug!("first: {}, last: {}", first, last);
        debug!("{} + {}: {}", first_char, last_char, joined);

        sum += joined.parse::<i32>().unwrap();
    }

    println!("sum: {}", sum);
}

fn main() {
    env_logger::init();

    debug!("Result: {:?}", find_all_literals("sixrrmlkptmc18zhvninek"));
    debug!("Result: {:?}", find_all_digits("sixrrmlkptmc18zhvninek"));
    return;

    let path = Path::new("../data/values.txt");
    let display = path.display();

    let mut file = match File::open(path) {
        Err(why) => panic!("couldn't open {}: {}", display, why),
        Ok(file) => file,
    };

    let mut s = String::new();
    match file.read_to_string(&mut s) {
        Err(why) => panic!("couldn't read {}: {}", display, why),
        Ok(_) => process(&mut s),
    }
}
